//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{

public sealed partial class TableNpcData :  Bright.Config.BeanBase 
{
    public TableNpcData(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { var __json0 = _json["weponIds"]; if(!__json0.IsArray) { throw new SerializationException(); } WeponIds = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  WeponIds.Add(__v0); }   }
        { if(!_json["model"].IsString) { throw new SerializationException(); }  Model = _json["model"]; }
        { if(!_json["hp"].IsNumber) { throw new SerializationException(); }  Hp = _json["hp"]; }
        { if(!_json["power"].IsNumber) { throw new SerializationException(); }  Power = _json["power"]; }
        { if(!_json["walkSpeed"].IsNumber) { throw new SerializationException(); }  WalkSpeed = _json["walkSpeed"]; }
        { if(!_json["runSpeed"].IsNumber) { throw new SerializationException(); }  RunSpeed = _json["runSpeed"]; }
        { if(!_json["visionDistance"].IsNumber) { throw new SerializationException(); }  VisionDistance = _json["visionDistance"]; }
        { if(!_json["visionAngle"].IsNumber) { throw new SerializationException(); }  VisionAngle = _json["visionAngle"]; }
        { if(!_json["hearing"].IsNumber) { throw new SerializationException(); }  Hearing = _json["hearing"]; }
        PostInit();
    }

    public TableNpcData(int id, string name, System.Collections.Generic.List<int> weponIds, string model, int hp, int power, float walkSpeed, float runSpeed, float visionDistance, float visionAngle, float hearing ) 
    {
        this.Id = id;
        this.Name = name;
        this.WeponIds = weponIds;
        this.Model = model;
        this.Hp = hp;
        this.Power = power;
        this.WalkSpeed = walkSpeed;
        this.RunSpeed = runSpeed;
        this.VisionDistance = visionDistance;
        this.VisionAngle = visionAngle;
        this.Hearing = hearing;
        PostInit();
    }

    public static TableNpcData DeserializeTableNpcData(JSONNode _json)
    {
        return new TableNpcData(_json);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 武器（可空）
    /// </summary>
    public System.Collections.Generic.List<int> WeponIds { get; private set; }
    /// <summary>
    /// 模型
    /// </summary>
    public string Model { get; private set; }
    /// <summary>
    /// 血量
    /// </summary>
    public int Hp { get; private set; }
    /// <summary>
    /// 体力
    /// </summary>
    public int Power { get; private set; }
    /// <summary>
    /// 移动速度
    /// </summary>
    public float WalkSpeed { get; private set; }
    /// <summary>
    /// 跑的速度
    /// </summary>
    public float RunSpeed { get; private set; }
    /// <summary>
    /// 视觉距离
    /// </summary>
    public float VisionDistance { get; private set; }
    /// <summary>
    /// 视觉角度
    /// </summary>
    public float VisionAngle { get; private set; }
    /// <summary>
    /// 听力半径
    /// </summary>
    public float Hearing { get; private set; }

    public const int __ID__ = -526572899;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "WeponIds:" + Bright.Common.StringUtil.CollectionToString(WeponIds) + ","
        + "Model:" + Model + ","
        + "Hp:" + Hp + ","
        + "Power:" + Power + ","
        + "WalkSpeed:" + WalkSpeed + ","
        + "RunSpeed:" + RunSpeed + ","
        + "VisionDistance:" + VisionDistance + ","
        + "VisionAngle:" + VisionAngle + ","
        + "Hearing:" + Hearing + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
